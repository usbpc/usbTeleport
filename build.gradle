import de.undercouch.gradle.tasks.download.Download
import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    ext.kotlin_version = '1.2.0'

    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "2.0.2"
    id "de.undercouch.download" version "3.3.0"
}

apply plugin: 'kotlin'
apply plugin: 'java'

group 'xyz.usbpc.mc.spigot.plugin'
version "0.1.${System.getenv('BUILD_NUMBER')}"

kotlin {
    experimental {
        coroutines 'enable'
    }
}

repositories {
    maven {
        url "https://hub.spigotmc.org/nexus/content/groups/public"
    }
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:0.19.2"

    compileOnly "org.spigotmc:spigot-api:1.12.2-R0.1-SNAPSHOT"
}

shadowJar {
    //filter(ReplaceTokens, tokens:['VERSION': version])
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

task toPluginDir(dependsOn: 'shadowJar' , type: Copy) {
    def file = new File("server/spigot.jar")
    if (!file.exists()) {
        dependsOn += ['runBuildTools']
    }
    from 'build/libs/' + project.name + '-' + project.version + '-all.jar'
    rename {
        if (it == project.name + '-' + project.version + '-all.jar') {
            return project.name + '.jar'
        } else {
            return null
        }
    }
    into 'server/plugins/'
}

task copyServerJar(dependsOn: 'runBuildTools', type: Copy) {
    from('spigotBuild/') {
        include 'spigot-*.jar'
    }
    rename "spigot.+\\.jar", "spigot.jar"
    into 'server/'
}

task downloadBuildTools(type: Download) {
    onlyIf {
        !(new File("spigotBuild/BuildTools.jar").exists())
    }
    src "https://hub.spigotmc.org/jenkins/job/BuildTools/lastSuccessfulBuild/artifact/target/BuildTools.jar"
    dest new File("spigotBuild/", "BuildTools.jar")
}

task runBuildTools(type: JavaExec) {
    onlyIf {
        !(new File("server/spigot.jar").exists())
    }
    dependsOn = ['downloadBuildTools']
    main = '-jar'
    args new File("spigotBuild/", "BuildTools.jar").getAbsolutePath()
    workingDir = "spigotBuild/"
}
